apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | quote }}
  labels:
    app.kubernetes.io/name: hive-metastore
    app.kubernetes.io/component: metastore
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: hive-metastore
      app.kubernetes.io/component: metastore
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
  serviceName: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hive-metastore
        app.kubernetes.io/component: metastore
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: metastore
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          #command: ['sh', '-c', '/opt/metastore/bin/schematool -initSchema -dbType postgres || true']
          #command: ["/bin/entrypoint", "start"]
          {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- end }}
          volumeMounts:
          - name: hive-config
            mountPath: /opt/metastore/conf
          env:
          - name: HIVE_METASTORE_HEAPSIZE
            value: {{ .Values.heapsize | quote }}
          - name: HADOOP_HEAPSIZE
            value: {{ .Values.heapsize | quote }}
          - name: HADOOP_CLIENT_OPTS
            value: {{ printf "-Xmx%dm" (div (mul .Values.heapsize 3) 4) }}
      initContainers:
        - name: configure
          image: busybox:1.28
          env:
          {{- if or .Values.postgresql.auth.existingSecret .Values.externalPostgresql.auth.existingSecret }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ ternary .Values.postgresql.auth.existingSecret .Values.externalPostgresql.auth.existingSecret .Values.postgresql.enabled }}
                key: {{ ternary .Values.postgresql.auth.secretKeys.userPasswordKey .Values.externalPostgresql.auth.secretKeys.userPasswordKey .Values.postgresql.enabled }}
          {{- end }}
          volumeMounts:
          - name: hive-config-base
            mountPath: /opt/metastore/conf-base
          - name: hive-config
            mountPath: /opt/metastore/conf
          command: 
          - sh
          - "-c"
          - |
            bash << 'EOF'
            cp /opt/metastore/conf-base/* /opt/metastore/conf/
            if [[ -v POSTGRES_PASSWORD ]]; then
              PROPERTIES="  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>${POSTGRES_PASSWORD}</value>\n  </property>\n"
              sed -i "/<\/configuration>/i ${PROPERTIES}" /opt/metastore/conf/metastore-site.xml
            fi
            EOF
        {{- if .Values.postgresql.enabled }}
        - name: wait-db-ready
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup {{ .Release.Name }}-postgresql ; do echo waiting for {{ .Release.Name }}-postgresql; sleep 2; done && sleep 10']
        {{- end }}
        - name: init-db
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          volumeMounts:
          - name: hive-config
            mountPath: /opt/metastore/conf
          command: ['sh', '-c', '/opt/metastore/bin/schematool -initSchema -dbType postgres || true']
      volumes:
      - name: hive-config
        emptyDir: {}
      - name: hive-config-base
        configMap:
          name: hive-metastore
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Release.Name }}
      {{- end }}
